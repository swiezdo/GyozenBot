import time
import random
import re
from aiogram.types import Message
from ai_client import get_response
from waiting_phrases import WAITING_PHRASES
from image_generator import generate_image
from config import OWNER_ID, GROUP_ID, TOPIC_ID  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TIME_THRESHOLD = 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –¥–ª—è –æ—Ç–≤–µ—Ç–∞
PATTERN = re.compile(r"–≥[—ë–µ]–¥[–∑—Å][–µ—ç]–Ω", re.IGNORECASE)  # –ü–æ–∏—Å–∫ —Å–ª–æ–≤–∞ "–ì—ë–¥–∑–µ–Ω"

async def start(message: Message) -> None:
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start."""
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –≤ —Å—Ç–∏–ª–µ –ì—ë–¥–∑–µ–Ω–∞. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å.")

def is_recent_message(message_time: float) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    return time.time() - message_time <= TIME_THRESHOLD

def is_relevant_message(message: Message) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –±–æ—Ç—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    - –í –õ–° –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.
    - –í –≥—Ä—É–ø–ø–µ –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –∏ —Ç–µ–º–µ.
    """
    chat_type = message.chat.type

    # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É)
    if chat_type == "private":
        return message.from_user.id == OWNER_ID

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É –∏ —Ç–µ–º—É
    if chat_type in ["group", "supergroup"]:
        if message.chat.id != GROUP_ID:  # –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ
            return False

        # –ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –µ—Å—Ç—å —Ç–µ–º—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º–µ
        if message.is_topic_message and message.message_thread_id != TOPIC_ID:
            return False

        return True

    return False  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

async def respond(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å AI-–æ—Ç–≤–µ—Ç–∞–º–∏."""
    message_time = message.date.timestamp()
    user_message = message.text.lower().strip() if message.text else ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å
    if not user_message or not is_recent_message(message_time) or not is_relevant_message(message):
        return

    # –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å "–ì—ë–¥–∑–µ–Ω"
    if not re.search(PATTERN, user_message):
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    match = re.search(r"–≥[—ë–µ]–¥[–∑—Å][–µ—ç]–Ω.*—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", user_message, re.IGNORECASE)
    if match:
        prompt = user_message[match.end():].strip()
        if not prompt:
            await message.reply("–û–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å!")
            return

        await message.reply("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... üé®üîÑ")
        image_url = await generate_image(prompt)
        if image_url:
            await message.reply_photo(image_url, caption="–í–æ—Ç —Ç–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! üé≠")
        else:
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. üò¢")
        return

    # –û–±—ã—á–Ω—ã–π AI-–æ—Ç–≤–µ—Ç
    waiting_phrase = random.choice(WAITING_PHRASES)
    waiting_message = await message.answer(waiting_phrase)
    response = await get_response(user_message)
    await waiting_message.edit_text(response)
