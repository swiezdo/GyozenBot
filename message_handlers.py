import time
import random
import re
from aiogram.types import Message
from ai_client import get_response
from waiting_phrases import WAITING_PHRASES
from image_generator import generate_image

# = = = –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è = = =
TIME_THRESHOLD = 60  # 60 —Å–µ–∫—É–Ω–¥
PATTERN = re.compile(r"–≥[—ë–µ]–¥[–∑—Å][–µ—ç]–Ω", re.IGNORECASE)

async def start(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –≤ —Å—Ç–∏–ª–µ –ì—ë–¥–∑–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π DeepSeek. –ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.")

def is_recent_message(message_time: float) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏–º.
    """
    return time.time() - message_time <= TIME_THRESHOLD

def is_relevant_message(message_text: str, chat_type: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ì—ë–¥–∑–µ–Ω–∞.
    """
    if chat_type in ["group", "supergroup"]:
        return bool(PATTERN.search(message_text))
    return True

async def respond(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò.
    """
    message_time = message.date.timestamp()
    user_message = message.text.lower().strip()
    chat_type = message.chat.type

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not is_recent_message(message_time) or not is_relevant_message(user_message, chat_type):
        return

    # = = = –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è = = =
    if re.search(r"–≥[—ë–µ]–¥–∑–µ–Ω.*—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", user_message):
        prompt = user_message.split("—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 1)[-1].strip()

        if not prompt:
            await message.reply("–û–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å!")
            return

        await message.reply("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... üé®üîÑ")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = await generate_image(prompt)
        if image_url:
            await message.reply_photo(image_url, caption="–í–æ—Ç —Ç–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! üé≠")
        else:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. üò¢")
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª —Å–≤—è–∑–∞–Ω —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º

    # = = = –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ = = =
    waiting_phrase = random.choice(WAITING_PHRASES)
    waiting_message = await message.answer(waiting_phrase)

    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    response = await get_response(user_message)
    await waiting_message.edit_text(response)
