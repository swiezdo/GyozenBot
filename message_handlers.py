import time
import random
import re
from aiogram.types import Message
from ai_client import get_response
from waiting_phrases import WAITING_PHRASES
from image_generator import generate_image
from config import OWNER_ID, GROUP_ID, TOPIC_ID  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

# = = = –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è = = =
TIME_THRESHOLD = 60  # 60 —Å–µ–∫—É–Ω–¥
PATTERN = re.compile(r"–≥[—ë–µ]–¥[–∑—Å][–µ—ç]–Ω", re.IGNORECASE)

async def start(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –≤ —Å—Ç–∏–ª–µ –ì—ë–¥–∑–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π DeepSeek. –ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.")

def is_recent_message(message_time: float) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏–º.
    """
    return time.time() - message_time <= TIME_THRESHOLD

def is_relevant_message(message: Message) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –±–æ—Ç—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    - –í –õ–° –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.
    - –í –≥—Ä—É–ø–ø–µ –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –∏ —Ç–µ–º–µ.
    """
    chat_type = message.chat.type

    # 1Ô∏è‚É£ **–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è** (–±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ OWNER_ID)
    if chat_type == "private":
        return message.from_user.id == OWNER_ID

    # 2Ô∏è‚É£ **–ì—Ä—É–ø–ø—ã / –°—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã**
    if chat_type in ["group", "supergroup"]:
        if message.chat.id != GROUP_ID:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—à–∞ –≥—Ä—É–ø–ø–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            return False

        # **–ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –≤–∫–ª—é—á–µ–Ω—ã —Ç–µ–º—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –Ω—É–∂–Ω–æ–π —Ç–µ–º–µ**
        if message.is_topic_message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ
            if message.message_thread_id != TOPIC_ID:  # –ù–µ –Ω–∞—à–∞ —Ç–µ–º–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                return False
        else:
            # –ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –µ—Å—Ç—å —Ç–µ–º—ã, –∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –≤ —Ç–µ–º–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            return False

        return True  # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –º–æ–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å

    return False  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º


async def respond(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò.
    """
    message_time = message.date.timestamp()
    user_message = message.text.lower().strip() if message.text else ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –±–æ—Ç—É –æ—Ç–≤–µ—á–∞—Ç—å
    if not user_message or not is_recent_message(message_time) or not is_relevant_message(message):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —á–∞—Ç—ã

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ "–ì—ë–¥–∑–µ–Ω" –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (—Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è)
    if not re.search(r"–≥[—ë–µ]–¥[–∑—Å][–µ—ç]–Ω", user_message, re.IGNORECASE):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è "–ì—ë–¥–∑–µ–Ω"

    # = = = –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è = = =
    match = re.search(r"–≥[—ë–µ]–¥[–∑—Å][–µ—ç]–Ω.*—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", user_message, re.IGNORECASE)
    if match:
        prompt = user_message[match.end():].strip()  # –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"

        if not prompt:
            await message.reply("–û–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å!")
            return

        await message.reply("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... üé®üîÑ")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = await generate_image(prompt)
        if image_url:
            await message.reply_photo(image_url, caption="–í–æ—Ç —Ç–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! üé≠")
        else:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. üò¢")
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª —Å–≤—è–∑–∞–Ω —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º

    # = = = –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ = = =
    waiting_phrase = random.choice(WAITING_PHRASES)
    waiting_message = await message.answer(waiting_phrase)

    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    response = await get_response(user_message)
    await waiting_message.edit_text(response)
